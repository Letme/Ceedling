require 'rake'

def prep_test
end

def assert_file_exist(path)
  if File.exist?(path)
    puts "File #{path} exists."
  else
    raise "File #{path} doesn't exist after create"
  end
end

def assert_file_contains(path, expected)
  if File.exist?(path)
    actual = File.read(path)
    if actual.match?(expected)
      puts "File #{path} exists and contains specified contents."
    else
      raise "File #{path} exists but doesn't contain specified contents."
    end
  else
    raise "File #{path} doesn't exist after create"
  end
end

def assert_file_not_exist(path)
  unless File.exist?(path)
    puts "File #{path} doesn't exist after destroy"
  else
    raise "File #{path} still exists after destroy."
  end
end

def assert_cmd_returns(cmd, expected)
  retval = `ceedling #{cmd}`
  if (retval.include? expected)
    puts "Testing included `#{expected}`"
  else
    raise "Testing did not include `#{expected}`"
  end
end

desc "Run integration test on example"
task :integration_test do
  chdir("./example/boss") do

    # Start with a blank example project
    prep_test

    # verify we can clean the dependencies
    puts "\nCleaning the Dependencies:"
    assert_cmd_returns("dependencies:clean")
    assert_file_not_exist("boss/third_party/bees/source/makefile")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_not_exist("supervisor/build/release/libsupervisor.a")
    assert_file_not_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    # verify we can fetch the dependencies
    puts "\nFetching the Dependencies:"
    assert_cmd_returns("dependencies:fetch")
    assert_file_exist("boss/third_party/bees/source/makefile")
    assert_file_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_not_exist("supervisor/build/release/libsupervisor.a")
    assert_file_not_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    # verify we can make the dependencies
    puts "\nMaking the Dependencies:"
    assert_cmd_returns("dependencies:make")
    assert_file_exist("boss/third_party/bees/source/makefile")
    assert_file_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_exist("supervisor/build/release/libsupervisor.a")
    assert_file_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    # verify we can clean the dependencies again
    puts "\nCleaning the Dependencies (round 2):"
    assert_cmd_returns("dependencies:clean")
    assert_file_not_exist("boss/third_party/bees/source/makefile")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_not_exist("supervisor/build/release/libsupervisor.a")
    assert_file_not_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    # verify dependencies are built automatically for a release build
    puts "\nRelease with Dependencies:"
    assert_cmd_returns("release")
    assert_file_exist("boss/third_party/bees/source/makefile")
    assert_file_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_exist("supervisor/build/release/libsupervisor.a")
    assert_file_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    # verify we can clean the dependencies again
    puts "\nCleaning the Dependencies (round 3):"
    assert_cmd_returns("dependencies:clean")
    assert_file_not_exist("boss/third_party/bees/source/makefile")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_not_exist("supervisor/build/release/libsupervisor.a")
    assert_file_not_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    # verify dependencies are built automatically for a test build
    puts "\nTesting with Dependencies:"
    assert_cmd_returns("test:all")
    assert_file_exist("boss/third_party/bees/source/makefile")
    assert_file_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_exist("supervisor/build/release/libsupervisor.a")
    assert_file_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    # verify we can clean the dependencies again
    puts "\nCleaning the Dependencies (round 4):"
    assert_cmd_returns("dependencies:clean")
    assert_file_not_exist("boss/third_party/bees/source/makefile")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.c")
    assert_file_not_exist("boss/third_party/bees/source/src/worker.h")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.a")
    assert_file_not_exist("boss/third_party/bees/source/build/libworker.h")
    assert_file_not_exist("supervisor/build/release/libsupervisor.a")
    assert_file_not_exist("supervisor/build/artifacts/release/libsupervisor.a")
    assert_file_exist("supervisor/src/supervisor.c")
    assert_file_exist("supervisor/src/supervisor.h")

    puts "\nPASSES MODULE SELF-TESTS"

  end
end

task :default => [:integration_test]